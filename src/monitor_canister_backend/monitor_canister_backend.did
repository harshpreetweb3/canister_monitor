type CanisterData = record {
  cycles : nat;
  memory_consumed : nat;
  module_hash : opt blob;
};
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant {
  Ok : record { CanisterStatusResponse };
  Err : record { RejectionCode; text };
};
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
service : () -> {
  get_all_timestamps : (principal) -> (
      vec record { nat64; CanisterData },
    ) query;
  get_canister_map : (principal, nat64) -> (opt CanisterData) query;
  get_canister_status : () -> ();
  get_canister_status_for_this_canister_id : () -> (Result);
  get_cycles_balance_of_canister : () -> (Result_1);
  get_memory_used_by_canister : () -> (Result_1);
  get_module_hash_of_canister : () -> (Result_1);
  set_canister_map : (principal, CanisterData) -> (Result_2);
}
